{"ast":null,"code":"var _jsxFileName = \"/home/erison/Documents/Projetos/reddit-reactjs/src/components/PostList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Post from \"./Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [after, setAfter] = useState(null);\n  const {\n    feed\n  } = useParams();\n  const API_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10`;\n  const PAGINATED_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10&after=${after}&count=10`;\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    setAfter(null);\n    fetchAPI(API_URL);\n  }, [feed]);\n\n  const fetchAPI = url => {\n    setIsLoading(true);\n\n    if (error) {\n      setError(null);\n    }\n\n    fetch(url).then(response => response.json()).then(newResponse => {\n      setAfter(newResponse.data.after);\n\n      if (newResponse.data.before === null) {\n        setPosts(newResponse.data.children);\n      } else {\n        setPosts([...posts, ...newResponse.data.children]);\n      }\n    }).catch(error => {\n      setError(error);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post.data\n    }, post.data.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 32\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"CDVoO4QGbImJSeQkAlgdTJL7Qds=\", true);\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/erison/Documents/Projetos/reddit-reactjs/src/components/PostList.jsx"],"names":["useState","useEffect","Post","PostList","isLoading","setIsLoading","posts","setPosts","error","setError","after","setAfter","feed","useParams","API_URL","PAGINATED_URL","fetchAPI","url","fetch","then","response","json","newResponse","data","before","children","catch","finally","map","post","id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAWC,SAAS,EAA1B;AACA,QAAMC,OAAO,GAAI,oCAAmCF,IAAK,iBAAzD;AACA,QAAMG,aAAa,GAAI,oCAAmCH,IAAK,yBAAwBF,KAAM,WAA7F;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AAEAK,IAAAA,QAAQ,CAACF,OAAD,CAAR;AACH,GANQ,EAMP,CAACF,IAAD,CANO,CAAT;;AAQA,QAAMI,QAAQ,GAAIC,GAAD,IAAS;AACtBZ,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAGG,KAAH,EAAU;AACVC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACC;;AACDS,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAI;AACrBX,MAAAA,QAAQ,CAACW,WAAW,CAACC,IAAZ,CAAiBb,KAAlB,CAAR;;AACA,UAAIY,WAAW,CAACC,IAAZ,CAAiBC,MAAjB,KAA4B,IAAhC,EAAsC;AAClCjB,QAAAA,QAAQ,CAACe,WAAW,CAACC,IAAZ,CAAiBE,QAAlB,CAAR;AACH,OAFD,MAEO;AACHlB,QAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGgB,WAAW,CAACC,IAAZ,CAAiBE,QAA/B,CAAD,CAAR;AACH;AACA,KATD,EAUCC,KAVD,CAUOlB,KAAK,IAAI;AAChBC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACC,KAZD,EAaCmB,OAbD,CAaS,MAAM;AACftB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACC,KAfD;AAgBH,GArBD;;AAuBA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACKC,KAAK,CAACsB,GAAN,CAAUC,IAAI,iBAAI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAI,CAACN;AAAjB,OAA4BM,IAAI,CAACN,IAAL,CAAUO,EAAtC;AAAA;AAAA;AAAA;AAAA,YAAlB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9CD;;GAAM3B,Q;;KAAAA,Q;AAgDN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Post from \"./Post\";\n\nconst PostList = () => {\n\n    const [isLoading, setIsLoading] = useState(null)\n    const [posts, setPosts] = useState([])\n    const [error, setError] = useState(null)\n    const [after, setAfter] = useState(null)\n    const { feed } = useParams()\n    const API_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10`\n    const PAGINATED_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10&after=${after}&count=10`\n\n    useEffect(() => {\n        setIsLoading(true)\n        setError(null)\n        setAfter(null)\n\n        fetchAPI(API_URL)\n    },[feed])\n\n    const fetchAPI = (url) => {\n        setIsLoading(true)\n        if(error) {\n        setError(null)\n        }\n        fetch(url)\n        .then(response => response.json())\n        .then(newResponse => {\n        setAfter(newResponse.data.after)\n        if (newResponse.data.before === null) {\n            setPosts(newResponse.data.children)\n        } else {\n            setPosts([...posts, ...newResponse.data.children])\n        }\n        })\n        .catch(error => {\n        setError(error)\n        })\n        .finally(() => {\n        setIsLoading(false)\n        })\n    }\n    \n    return ( \n        <div className=\"feed\">\n            {posts.map(post => <Post post={post.data} key={post.data.id}/>)}\n        </div>\n    );\n}\n \nexport default PostList;"]},"metadata":{},"sourceType":"module"}