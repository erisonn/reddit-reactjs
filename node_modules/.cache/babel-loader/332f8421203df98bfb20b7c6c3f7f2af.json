{"ast":null,"code":"var _jsxFileName = \"/home/erison/Documents/Projetos/reddit-reactjs/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport PostList from \"./components/PostList.jsx\";\nimport LoadingSVG from \"./svg/loading.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [after, setAfter] = useState(null);\n  const [feed, setFeed] = useState('hot');\n  const API_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10`;\n  const PAGINATED_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10&after=${after}&count=10`;\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    setAfter(null);\n    fetchAPI(API_URL);\n  }, [feed]);\n\n  const fetchAPI = url => {\n    setIsLoading(true);\n\n    if (error) {\n      setError(null);\n    }\n\n    fetch(url).then(response => response.json()).then(newResponse => {\n      setAfter(newResponse.data.after);\n\n      if (newResponse.data.before === null) {\n        setPosts(newResponse.data.children);\n      } else {\n        setPosts([...posts, ...newResponse.data.children]);\n      }\n    }).catch(error => {\n      setError(error);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(PostList, {\n          posts: posts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), after && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ver-mais\",\n          onClick: () => fetchAPI(PAGINATED_URL),\n          children: \"Load more.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: LoadingSVG\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 48\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-handling\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Error on loading posts.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => fetchAPI(API_URL),\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"GdavHhcsyldOJwNvNa99o5J5bqo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/erison/Documents/Projetos/reddit-reactjs/src/App.js"],"names":["useEffect","useState","Header","PostList","App","isLoading","setIsLoading","posts","setPosts","error","setError","after","setAfter","feed","setFeed","API_URL","PAGINATED_URL","fetchAPI","url","fetch","then","response","json","newResponse","data","before","children","catch","finally","LoadingSVG"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport PostList from \"./components/PostList.jsx\";\nimport LoadingSVG from './svg/loading.svg'\n\nfunction App() {\n\n  const [isLoading, setIsLoading] = useState(null)\n  const [posts, setPosts] = useState([])\n  const [error, setError] = useState(null)\n  const [after, setAfter] = useState(null)\n  const [feed, setFeed] = useState('hot')\n  const API_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10`\n  const PAGINATED_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10&after=${after}&count=10`\n\n  useEffect(() => {\n    setIsLoading(true)\n    setError(null)\n    setAfter(null)\n\n    fetchAPI(API_URL)\n  },[feed])\n\n  const fetchAPI = (url) => {\n    setIsLoading(true)\n    if(error) {\n      setError(null)\n    }\n    fetch(url)\n    .then(response => response.json())\n    .then(newResponse => {\n      setAfter(newResponse.data.after)\n      if (newResponse.data.before === null) {\n        setPosts(newResponse.data.children)\n      } else {\n        setPosts([...posts, ...newResponse.data.children])\n      }\n    })\n    .catch(error => {\n      setError(error)\n    })\n    .finally(() => {\n      setIsLoading(false)\n    })\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header/>\n        <>\n          <PostList posts ={posts}/>\n        {after && <button className=\"ver-mais\" onClick={() => fetchAPI(PAGINATED_URL)}>Load more.</button>}\n        {isLoading && <div className=\"loading\"><img src={LoadingSVG}/></div>}\n        </>\n\n        {/*tratamento de erro*/}\n        {error && \n        <div className=\"error-handling\">\n          <p>Error on loading posts.</p>\n          <button onClick={() => fetchAPI(API_URL)}>Try Again</button>\n        </div>}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}