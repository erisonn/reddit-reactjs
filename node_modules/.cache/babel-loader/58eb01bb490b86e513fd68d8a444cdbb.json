{"ast":null,"code":"var _jsxFileName = \"/home/erison/Documents/Projetos/reddit-reactjs/src/components/PostList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport Post from \"./Post\";\nimport LoadingSVG from \"../svg/loading.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [after, setAfter] = useState(null);\n  const {\n    feed\n  } = useParams();\n  const API_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10`;\n  const PAGINATED_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10&after=${after}&count=10`;\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    setAfter(null);\n    fetchAPI(API_URL);\n  }, [feed]);\n\n  const fetchAPI = url => {\n    setIsLoading(true);\n\n    if (error) {\n      setError(null);\n    }\n\n    fetch(url).then(response => response.json()).then(newResponse => {\n      setAfter(newResponse.data.after);\n\n      if (newResponse.data.before === null) {\n        setPosts(newResponse.data.children);\n      } else {\n        setPosts([...posts, ...newResponse.data.children]);\n      }\n    }).catch(error => {\n      setError(error);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post.data\n    }, post.data.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 32\n    }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: LoadingSVG,\n        alt: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 27\n    }, this), after && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"ver-mais\",\n      onClick: () => fetchAPI(PAGINATED_URL),\n      children: \"Load more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"CDVoO4QGbImJSeQkAlgdTJL7Qds=\", false, function () {\n  return [useParams];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/erison/Documents/Projetos/reddit-reactjs/src/components/PostList.jsx"],"names":["useState","useEffect","useParams","Post","PostList","isLoading","setIsLoading","posts","setPosts","error","setError","after","setAfter","feed","API_URL","PAGINATED_URL","fetchAPI","url","fetch","then","response","json","newResponse","data","before","children","catch","finally","map","post","id","LoadingSVG"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAWX,SAAS,EAA1B;AACA,QAAMY,OAAO,GAAI,oCAAmCD,IAAK,iBAAzD;AACA,QAAME,aAAa,GAAI,oCAAmCF,IAAK,yBAAwBF,KAAM,WAA7F;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AAEAI,IAAAA,QAAQ,CAACF,OAAD,CAAR;AACH,GANQ,EAMP,CAACD,IAAD,CANO,CAAT;;AAQA,QAAMG,QAAQ,GAAIC,GAAD,IAAS;AACtBX,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAGG,KAAH,EAAU;AACVC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACC;;AACDQ,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAI;AACrBV,MAAAA,QAAQ,CAACU,WAAW,CAACC,IAAZ,CAAiBZ,KAAlB,CAAR;;AACA,UAAIW,WAAW,CAACC,IAAZ,CAAiBC,MAAjB,KAA4B,IAAhC,EAAsC;AAClChB,QAAAA,QAAQ,CAACc,WAAW,CAACC,IAAZ,CAAiBE,QAAlB,CAAR;AACH,OAFD,MAEO;AACHjB,QAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGe,WAAW,CAACC,IAAZ,CAAiBE,QAA/B,CAAD,CAAR;AACH;AACA,KATD,EAUCC,KAVD,CAUOjB,KAAK,IAAI;AAChBC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACC,KAZD,EAaCkB,OAbD,CAaS,MAAM;AACfrB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACC,KAfD;AAgBH,GArBD;;AAuBA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eACKC,KAAK,CAACqB,GAAN,CAAUC,IAAI,iBAAI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAI,CAACN;AAAjB,OAA4BM,IAAI,CAACN,IAAL,CAAUO,EAAtC;AAAA;AAAA;AAAA;AAAA,YAAlB,CADL,EAEKzB,SAAS,iBAAI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BAAyB;AAAK,QAAA,GAAG,EAAE0B,UAAV;AAAsB,QAAA,GAAG,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,YAFlB,EAGKpB,KAAK,iBAAI;AAAQ,MAAA,SAAS,EAAC,UAAlB;AAA6B,MAAA,OAAO,EAAE,MAAMK,QAAQ,CAACD,aAAD,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHd;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAjDD;;GAAMX,Q;UAMeF,S;;;KANfE,Q;AAmDN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport Post from \"./Post\";\nimport LoadingSVG from '../svg/loading.svg'\n\nconst PostList = () => {\n\n    const [isLoading, setIsLoading] = useState(null)\n    const [posts, setPosts] = useState([])\n    const [error, setError] = useState(null)\n    const [after, setAfter] = useState(null)\n    const { feed } = useParams()\n    const API_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10`\n    const PAGINATED_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10&after=${after}&count=10`\n\n    useEffect(() => {\n        setIsLoading(true)\n        setError(null)\n        setAfter(null)\n\n        fetchAPI(API_URL)\n    },[feed])\n\n    const fetchAPI = (url) => {\n        setIsLoading(true)\n        if(error) {\n        setError(null)\n        }\n        fetch(url)\n        .then(response => response.json())\n        .then(newResponse => {\n        setAfter(newResponse.data.after)\n        if (newResponse.data.before === null) {\n            setPosts(newResponse.data.children)\n        } else {\n            setPosts([...posts, ...newResponse.data.children])\n        }\n        })\n        .catch(error => {\n        setError(error)\n        })\n        .finally(() => {\n        setIsLoading(false)\n        })\n    }\n    \n    return ( \n        <div className=\"feed\">\n            {posts.map(post => <Post post={post.data} key={post.data.id}/>)}\n            {isLoading && <div className=\"loading\"><img src={LoadingSVG} alt=\"Loading...\" /></div>}\n            {after && <button className=\"ver-mais\" onClick={() => fetchAPI(PAGINATED_URL)}>Load more</button>}\n            \n        </div>\n    );\n}\n \nexport default PostList;"]},"metadata":{},"sourceType":"module"}