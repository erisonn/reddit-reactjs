{"ast":null,"code":"var _jsxFileName = \"/home/erison/Documents/Projetos/reddit-reactjs/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { BrowserRouter, useParams } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Router from './Router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [after, setAfter] = useState(null);\n  const {\n    feed\n  } = useParams();\n  const API_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10`;\n  const PAGINATED_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10&after=${after}&count=10`;\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    setAfter(null);\n    fetchAPI(API_URL);\n  }, [feed]);\n\n  const fetchAPI = url => {\n    setIsLoading(true);\n\n    if (error) {\n      setError(null);\n    }\n\n    fetch(url).then(response => response.json()).then(newResponse => {\n      setAfter(newResponse.data.after);\n\n      if (newResponse.data.before === null) {\n        setPosts(newResponse.data.children);\n      } else {\n        setPosts([...posts, ...newResponse.data.children]);\n      }\n    }).catch(error => {\n      setError(error);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Router, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"CDVoO4QGbImJSeQkAlgdTJL7Qds=\", false, function () {\n  return [useParams];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/erison/Documents/Projetos/reddit-reactjs/src/App.js"],"names":["useEffect","useState","BrowserRouter","useParams","Header","Router","App","isLoading","setIsLoading","posts","setPosts","error","setError","after","setAfter","feed","API_URL","PAGINATED_URL","fetchAPI","url","fetch","then","response","json","newResponse","data","before","children","catch","finally"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,kBAAzC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAWZ,SAAS,EAA1B;AACA,QAAMa,OAAO,GAAI,oCAAmCD,IAAK,iBAAzD;AACA,QAAME,aAAa,GAAI,oCAAmCF,IAAK,yBAAwBF,KAAM,WAA7F;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AAEAI,IAAAA,QAAQ,CAACF,OAAD,CAAR;AACD,GANQ,EAMP,CAACD,IAAD,CANO,CAAT;;AAQA,QAAMG,QAAQ,GAAIC,GAAD,IAAS;AACxBX,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAGG,KAAH,EAAU;AACRC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDQ,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAI;AACnBV,MAAAA,QAAQ,CAACU,WAAW,CAACC,IAAZ,CAAiBZ,KAAlB,CAAR;;AACA,UAAIW,WAAW,CAACC,IAAZ,CAAiBC,MAAjB,KAA4B,IAAhC,EAAsC;AACpChB,QAAAA,QAAQ,CAACc,WAAW,CAACC,IAAZ,CAAiBE,QAAlB,CAAR;AACD,OAFD,MAEO;AACLjB,QAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGe,WAAW,CAACC,IAAZ,CAAiBE,QAA/B,CAAD,CAAR;AACD;AACF,KATD,EAUCC,KAVD,CAUOjB,KAAK,IAAI;AACdC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAZD,EAaCkB,OAbD,CAaS,MAAM;AACbrB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAfD;AAgBD,GArBD;;AAuBA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,aAAD;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAQD;;GAjDQF,G;UAMUH,S;;;KANVG,G;AAmDT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { BrowserRouter, useParams } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Router from './Router'\n\nfunction App() {\n\n  const [isLoading, setIsLoading] = useState(null)\n  const [posts, setPosts] = useState([])\n  const [error, setError] = useState(null)\n  const [after, setAfter] = useState(null)\n  const { feed } = useParams()\n  const API_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10`\n  const PAGINATED_URL = `https://www.reddit.com/r/reactjs/${feed}/.json?limit=10&after=${after}&count=10`\n\n  useEffect(() => {\n    setIsLoading(true)\n    setError(null)\n    setAfter(null)\n\n    fetchAPI(API_URL)\n  },[feed])\n\n  const fetchAPI = (url) => {\n    setIsLoading(true)\n    if(error) {\n      setError(null)\n    }\n    fetch(url)\n    .then(response => response.json())\n    .then(newResponse => {\n      setAfter(newResponse.data.after)\n      if (newResponse.data.before === null) {\n        setPosts(newResponse.data.children)\n      } else {\n        setPosts([...posts, ...newResponse.data.children])\n      }\n    })\n    .catch(error => {\n      setError(error)\n    })\n    .finally(() => {\n      setIsLoading(false)\n    })\n  }\n\n  return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Header />\n          <Router/>\n        </BrowserRouter>\n      </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}