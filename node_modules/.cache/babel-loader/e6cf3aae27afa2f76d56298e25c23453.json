{"ast":null,"code":"var _jsxFileName = \"/home/erison/Documents/Projetos/reddit-reactjs/src/components/PostList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport Header from \"./Header\";\nimport Post from \"./Post\";\nimport LoadingSVG from \"../svg/loading.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  //states\n  const [isLoading, setIsLoading] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [defaultSubs, setDefaultSubs] = useState([]);\n  const [error, setError] = useState(null);\n  const [after, setAfter] = useState(null); //parametros\n\n  const {\n    sub = ''\n  } = useParams();\n  const {\n    sort = ''\n  } = useParams(); //API\n\n  const DEFAULT_SUBS = `https://www.reddit.com/subreddits/default/.json?limit=100`;\n  const API_URL = `https://www.reddit.com/${sub !== '' ? `r/${sub}/` : ''}${sort}.json?limit=10`;\n  const PAGINATED_URL = `https://www.reddit.com/${sub !== '' ? `r/${sub}/` : ''}${sort}.json?limit=10&after=${after}&count=10`;\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    setAfter(null);\n    console.log(API_URL);\n    fetchAPI(API_URL);\n    fetchSUBS();\n  }, [sort, sub]);\n\n  const fetchAPI = url => {\n    setIsLoading(true);\n\n    if (error) {\n      setError(null);\n    }\n\n    fetch(url).then(response => response.json()).then(newResponse => {\n      setAfter(newResponse.data.after);\n\n      if (newResponse.data.before === null) {\n        setPosts(newResponse.data.children);\n      } else {\n        setPosts([...posts, ...newResponse.data.children]);\n      }\n    }).catch(error => {\n      setError(error);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  const fetchSUBS = () => {\n    fetch(DEFAULT_SUBS).then(response => response.json()).then(newResponse => setDefaultSubs(newResponse.data.children)).catch(error => console.log(error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      sub: sub,\n      defaultSubs: defaultSubs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed\",\n      children: [error === null ? posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        post: post.data\n      }, post.data.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 30\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-handling\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Error on loading posts.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => fetchAPI(API_URL),\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: LoadingSVG,\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 52\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 27\n      }, this), \" \", after && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ver-mais\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => fetchAPI(PAGINATED_URL),\n          children: \"Load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PostList, \"mLfwtMQOFxl5fI4SMHTiBbPxFXI=\", false, function () {\n  return [useParams, useParams];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/erison/Documents/Projetos/reddit-reactjs/src/components/PostList.jsx"],"names":["useState","useEffect","useParams","Header","Post","PostList","isLoading","setIsLoading","posts","setPosts","defaultSubs","setDefaultSubs","error","setError","after","setAfter","sub","sort","DEFAULT_SUBS","API_URL","PAGINATED_URL","console","log","fetchAPI","fetchSUBS","url","fetch","then","response","json","newResponse","data","before","children","catch","finally","map","post","id","LoadingSVG"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport Header from \"./Header\";\nimport Post from \"./Post\";\nimport LoadingSVG from '../svg/loading.svg'\n\nconst PostList = () => {\n\n    //states\n    const [isLoading, setIsLoading] = useState(null)\n    const [posts, setPosts] = useState([])\n    const [defaultSubs, setDefaultSubs] = useState([])\n    const [error, setError] = useState(null)\n    const [after, setAfter] = useState(null)\n\n    //parametros\n    const { sub = '' } = useParams()\n    const { sort = '' } = useParams()\n\n    //API\n    const DEFAULT_SUBS = `https://www.reddit.com/subreddits/default/.json?limit=100`\n    const API_URL = `https://www.reddit.com/${sub !== '' ? `r/${sub}/` : ''}${sort}.json?limit=10`\n    const PAGINATED_URL = `https://www.reddit.com/${sub !== '' ? `r/${sub}/` : ''}${sort}.json?limit=10&after=${after}&count=10`\n\n    useEffect(() => {\n        setIsLoading(true)\n        setError(null)\n        setAfter(null)\n        console.log(API_URL)\n\n        fetchAPI(API_URL)\n        fetchSUBS()\n    },[sort, sub])\n\n    const fetchAPI = (url) => {\n        setIsLoading(true)\n        if(error) {\n        setError(null)\n        }\n\n        fetch(url)\n        .then(response => response.json())\n        .then(newResponse => {\n        setAfter(newResponse.data.after)\n        if (newResponse.data.before === null) {\n            setPosts(newResponse.data.children)\n        } else {\n            setPosts([...posts, ...newResponse.data.children])\n        }\n        })\n        .catch(error => {\n        setError(error)\n        })\n        .finally(() => {\n        setIsLoading(false)\n        })\n    }\n    const fetchSUBS = () => {\n        fetch(DEFAULT_SUBS)\n        .then(response => response.json())\n        .then(newResponse => setDefaultSubs(newResponse.data.children))\n        .catch(error => console.log(error))\n    }\n    \n    return ( \n        <>\n        <Header sub ={sub} defaultSubs={defaultSubs}/>\n        <div className=\"feed\">\n\n            {error === null ? \n            posts.map(post =><Post post={post.data} key={post.data.id}/>) \n            : \n            <div className=\"error-handling\">\n                <p>Error on loading posts.</p>\n                <button onClick={() => fetchAPI(API_URL)}>Try Again</button>\n            </div>\n            }\n\n            {isLoading && <div className=\"loading\"><img src={LoadingSVG} alt=\"Loading...\" /></div>} {/*Caso isLoading seja */}\n\n            {after && \n            <div className=\"ver-mais\">\n                <button onClick={() => fetchAPI(PAGINATED_URL)}>Load more</button>\n            </div>}\n        </div>\n        </>\n    );\n}\n \nexport default PostList;"]},"metadata":{},"sourceType":"module"}