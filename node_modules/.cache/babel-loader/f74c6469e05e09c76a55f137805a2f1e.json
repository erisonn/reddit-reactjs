{"ast":null,"code":"var _jsxFileName = \"/home/erison/Documents/Projetos/reddit-reactjs/src/components/PostList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport Post from \"./Post\";\nimport LoadingSVG from \"../svg/loading.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  const API_URL = `https://www.reddit.com/${feed}/.json?limit=10`;\n  const PAGINATED_URL = `https://www.reddit.com/${feed}/.json?limit=10&after=${after}&count=10`; //states\n\n  const [isLoading, setIsLoading] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [after, setAfter] = useState(null); //para\n\n  const {\n    feed\n  } = useParams();\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    setAfter(null);\n    fetchAPI(API_URL);\n  }, [feed]);\n\n  const fetchAPI = url => {\n    setIsLoading(true);\n\n    if (error) {\n      setError(null);\n    }\n\n    fetch(url).then(response => response.json()).then(newResponse => {\n      setAfter(newResponse.data.after);\n\n      if (newResponse.data.before === null) {\n        setPosts(newResponse.data.children);\n      } else {\n        setPosts([...posts, ...newResponse.data.children]);\n      }\n    }).catch(error => {\n      setError(error);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post.data\n    }, post.data.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 32\n    }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: LoadingSVG,\n        alt: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 27\n    }, this), after && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ver-mais\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchAPI(PAGINATED_URL),\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-handling\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error on loading posts.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchAPI(API_URL),\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"CDVoO4QGbImJSeQkAlgdTJL7Qds=\", false, function () {\n  return [useParams];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/erison/Documents/Projetos/reddit-reactjs/src/components/PostList.jsx"],"names":["useState","useEffect","useParams","Post","PostList","API_URL","feed","PAGINATED_URL","after","isLoading","setIsLoading","posts","setPosts","error","setError","setAfter","fetchAPI","url","fetch","then","response","json","newResponse","data","before","children","catch","finally","map","post","id","LoadingSVG"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport Post from \"./Post\";\nimport LoadingSVG from '../svg/loading.svg'\n\nconst PostList = () => {\n\n    const API_URL = `https://www.reddit.com/${feed}/.json?limit=10`\n    const PAGINATED_URL = `https://www.reddit.com/${feed}/.json?limit=10&after=${after}&count=10`\n    //states\n    const [isLoading, setIsLoading] = useState(null)\n    const [posts, setPosts] = useState([])\n    const [error, setError] = useState(null)\n    const [after, setAfter] = useState(null)\n    //para\n    const { feed } = useParams()\n\n    useEffect(() => {\n        setIsLoading(true)\n        setError(null)\n        setAfter(null)\n\n        fetchAPI(API_URL)\n    },[feed])\n\n    const fetchAPI = (url) => {\n        setIsLoading(true)\n        if(error) {\n        setError(null)\n        }\n        fetch(url)\n        .then(response => response.json())\n        .then(newResponse => {\n        setAfter(newResponse.data.after)\n        if (newResponse.data.before === null) {\n            setPosts(newResponse.data.children)\n        } else {\n            setPosts([...posts, ...newResponse.data.children])\n        }\n        })\n        .catch(error => {\n        setError(error)\n        })\n        .finally(() => {\n        setIsLoading(false)\n        })\n    }\n    \n    return ( \n        <div className=\"feed\">\n            {posts.map(post => <Post post={post.data} key={post.data.id}/>)}\n            {isLoading && <div className=\"loading\"><img src={LoadingSVG} alt=\"Loading...\" /></div>}\n            {after &&  \n            <div className=\"ver-mais\">\n                <button onClick={() => fetchAPI(PAGINATED_URL)}>Load more</button>\n            </div>}\n            {error && \n            <div className=\"error-handling\">\n                <p>Error on loading posts.</p>\n                <button onClick={() => fetchAPI(API_URL)}>Try Again</button>\n            </div>}\n        </div>\n    );\n}\n \nexport default PostList;"]},"metadata":{},"sourceType":"module"}